import fs from 'npm:fs-extra';

/**
 * Sanitizes and validates the npm package name.
 * Returns a valid package name or throws an error.
 */
function sanitizePackageName(name: string): string {
    // Basic npm package name validation (no spaces, no special chars except - and _)
    const valid = /^([a-zA-Z0-9-_]+)$/;
    if (!valid.test(name)) {
        throw new Error(
            '❌ Invalid package name. Use only letters, numbers, dashes, and underscores.'
        );
    }
    return name;
}

/**
 * Main action to scaffold a new npm package project.
 */
export async function createNpmPackageProject(
    packageName: string
): Promise<void> {
    try {
        const name = sanitizePackageName(packageName);
        const root = `/Users/seth/repositories/${name}`;
        if (await fs.pathExists(root)) {
            console.error('❌ Directory already exists.');
            Deno.exit(1);
        }
        // Create directory structure
        await fs.ensureDir(`${root}/src`);

        // Write LICENSE file (MIT)
        const year = new Date().getFullYear();
        const author = 'Seth Davis'; // TODO: Optionally make this dynamic
        await fs.writeFile(
            `${root}/LICENSE`,
            `MIT License\n\nCopyright (c) ${year} ${author}\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the "Software"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n`
        );

        // Write package.json
        const pkgJson = {
            name,
            version: '1.0.0',
            description: `A new npm package: ${name}`,
            keywords: ['typescript', 'package'],
            homepage: `https://github.com/sethdavis512/${name}`,
            bugs: {
                url: `https://github.com/sethdavis512/${name}/issues`
            },
            author: 'Seth Davis <techwithseth512@gmail.com> (https://sethdavis.tech)',
            repository: {
                type: 'git',
                url: `git+https://github.com/sethdavis512/${name}.git`
            },
            files: ['dist'],
            type: 'module',
            main: 'dist/index.js',
            types: 'dist/index.d.ts',
            scripts: {
                build: 'tsc',
                test: 'vitest run',
                dev: 'vitest',
                ci: 'npm run build && npm run check-format && npm run test',
                format: 'prettier --write .',
                'check-format': 'prettier --check .',
                changeset: 'changeset',
                release: 'changeset version',
                prepublishOnly: 'npm run ci'
            },
            license: 'MIT'
        };
        await fs.writeJson(`${root}/package.json`, pkgJson, { spaces: 2 });

        // Write README.md with publish instructions
        await fs.writeFile(
            `${root}/README.md`,
            `# ${name}

A new npm package generated by TWS CLI.

## Getting Started

This package has been scaffolded with:
- Git repository initialized with remote origin set to https://github.com/sethdavis512/${name}.git
- TypeScript configuration
- Vitest for testing
- Prettier for code formatting
- Changesets for version management
- GitHub Actions workflows for CI/CD

## Development Workflow

### 1. **Development Phase**
- Write new code in utils.ts
- Write tests in utils.test.ts

### 2. **Testing & Quality**
- \`npm run dev\` - Run tests in watch mode during development
- \`npm run test\` - Run all tests once
- \`npm run ci\` - Full CI check (build + format check + tests)

### 3. **Document Changes**
- \`npm run changeset\` - Create a changeset describing your changes
  - This will prompt you to select the type of change (patch/minor/major)
  - Write a description of what changed

### 4. **Format & Build**
- \`npm run format\` - Auto-format your code with Prettier
- \`npm run build\` - Compile TypeScript to dist

### 5. **Release**
- \`npm run release\` - This will:
  - Update version numbers based on changesets
  - Generate/update CHANGELOG.md
  - Publish to npm

### 6. **Pre-publish Safety**
- The \`prepublishOnly\` script automatically runs your CI checks before any publish

**Key Commands for Your Workflow:**
- \`npm run changeset\` - Document what you changed
- \`npm run ci\` - Verify everything is ready
- \`npm run release\` - Version and publish

This setup with Changesets is excellent because it:
- Enforces semantic versioning
- Automatically generates changelogs
- Handles monorepo scenarios well
- Provides a clear audit trail of changes

## Publishing

To publish this package to npm, make sure you have an npm account and are logged in.

\`\`\`sh
npm publish --access public
\`\`\`

Or push to main to trigger the GitHub Actions workflow.

## Repository Setup

The git remote origin has been automatically configured. To create the GitHub repository, run:

\`\`\`sh
gh repo create sethdavis512/${name} --public --push
\`\`\`
`
        );

        // Write src/index.ts
        await fs.writeFile(
            `${root}/src/index.ts`,
            `export { add } from "./utils.js";`
        );

        // Write src/utils.ts
        await fs.writeFile(
            `${root}/src/utils.ts`,
            `export const add = (a: number, b: number) => a + b;`
        );
        // Write tsconfig.json
        await fs.writeJson(
            `${root}/tsconfig.json`,
            {
                compilerOptions: {
                    /* Base Options: */
                    esModuleInterop: true,
                    skipLibCheck: true,
                    target: 'es2022',
                    allowJs: true,
                    resolveJsonModule: true,
                    moduleDetection: 'force',
                    isolatedModules: true,
                    verbatimModuleSyntax: true,
                    /* Strictness */
                    strict: true,
                    noUncheckedIndexedAccess: true,
                    noImplicitOverride: true,
                    /* If transpiling with TypeScript: */
                    module: 'NodeNext',
                    outDir: 'dist',
                    rootDir: 'src',
                    sourceMap: true,
                    /* Building for a library: */
                    declaration: true,
                    declarationMap: true,
                    /* Non-DOM library */
                    lib: ['es2022']
                }
            },
            { spaces: 2 }
        );
        // Write .gitignore
        await fs.writeFile(
            `${root}/.gitignore`,
            'node_modules\ndist\n.DS_Store\n'
        );
        // Write a sample test file (Vitest)
        await fs.writeFile(
            `${root}/src/utils.test.ts`,
            `import { add } from "./utils.js";\nimport { test, expect } from "vitest";\n\ntest("add", () => {\n  expect(add(1, 2)).toBe(3);\n});\n`
        );
        // Initialize a new git repository
        const gitInit = new Deno.Command('git', {
            args: ['init'],
            cwd: root,
            stdout: 'inherit',
            stderr: 'inherit'
        });
        const { code: gitCode } = await gitInit.output();
        if (gitCode === 0) {
            console.log('✅ Initialized a new git repository.');
        } else {
            console.error('❌ Failed to initialize git repository.');
        }

        // Add remote origin
        const gitRemoteAdd = new Deno.Command('git', {
            args: [
                'remote',
                'add',
                'origin',
                `https://github.com/sethdavis512/${name}.git`
            ],
            cwd: root,
            stdout: 'inherit',
            stderr: 'inherit'
        });
        const { code: gitRemoteCode } = await gitRemoteAdd.output();
        if (gitRemoteCode === 0) {
            console.log('✅ Added remote origin.');
        } else {
            console.error('❌ Failed to add remote origin.');
        }

        // Run npm install to set up dependencies (typescript, prettier, vitest, changesets)
        const npmInstall = new Deno.Command('npm', {
            args: [
                'install',
                '--save-dev',
                'typescript',
                'prettier',
                'vitest',
                '@changesets/cli'
            ],
            cwd: root,
            stdout: 'inherit',
            stderr: 'inherit'
        });
        const { code: npmCode } = await npmInstall.output();
        if (npmCode === 0) {
            console.log('✅ npm install completed.');
        } else {
            console.error('❌ npm install failed.');
        }

        // Scaffold GitHub Actions workflow for npm publish
        const workflowDir = `${root}/.github/workflows`;
        await fs.ensureDir(workflowDir);
        await fs.writeFile(
            `${workflowDir}/publish.yml`,
            `name: Publish Package

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org/'
      - run: npm install
      - run: npm run build
      - run: npm publish
        env:
          NODE_AUTH_TOKEN: \${{ secrets.NPM_TOKEN }}
`
        );

        // Write .prettierrc
        await fs.writeFile(
            `${root}/.prettierrc`,
            `{
  "semi": true,
  "singleQuote": true,
  "trailingComma": "all",
  "printWidth": 80,
  "tabWidth": 2
}
`
        );

        // Initialize changesets
        const changesetInit = new Deno.Command('npx', {
            args: ['changeset', 'init'],
            cwd: root,
            stdout: 'inherit',
            stderr: 'inherit'
        });
        await changesetInit.output();

        // Configure changesets
        await fs.writeJson(
            `${root}/.changeset/config.json`,
            {
                $schema:
                    'https://unpkg.com/@changesets/config@3.0.0/schema.json',
                changelog: '@changesets/cli/changelog',
                commit: true,
                fixed: [],
                linked: [],
                access: 'public',
                baseBranch: 'main',
                updateInternalDependencies: 'patch',
                ignore: []
            },
            { spaces: 2 }
        );

        // Create CI workflow
        const ciWorkflowDir = `${root}/.github/workflows`;
        await fs.ensureDir(ciWorkflowDir);
        await fs.writeFile(
            `${ciWorkflowDir}/ci.yml`,
            `name: CI

on:
  pull_request:
  push:
    branches:
      - main

concurrency:
  group: \${{ github.workflow }}-\${{ github.ref }}
  cancel-in-progress: true

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm install

      - name: Run CI
        run: npm run ci
`
        );

        // Remove old eslint files (not in article)
        // Write .eslintrc.json
        await fs.writeFile(
            `${root}/.eslintrc.json`,
            `{
  "env": {
    "es2021": true,
    "node": true
  },
  "extends": ["eslint:recommended", "plugin:@typescript-eslint/recommended"],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "ecmaVersion": 12,
    "sourceType": "module"
  },
  "plugins": ["@typescript-eslint"],
  "rules": {}
}
`
        );
        console.log(
            '✅ Package scaffolded with all Total TypeScript article requirements!'
        );

        // Final success message
        if (gitCode === 0 && gitRemoteCode === 0 && npmCode === 0) {
            console.log(
                '✅ npm package scaffolded successfully and ready to deploy!'
            );

            // Open the project in VS Code
            const codeOpen = new Deno.Command('code', {
                args: ['.'],
                cwd: root,
                stdout: 'inherit',
                stderr: 'inherit'
            });
            const { code: codeOpenCode } = await codeOpen.output();
            if (codeOpenCode === 0) {
                console.log('✅ Opened project in VS Code.');
            } else {
                console.log(
                    '⚠️  Could not open VS Code automatically. You can manually run "code ." in the project directory.'
                );
            }
        }
    } catch (err) {
        const message = err instanceof Error ? err.message : String(err);
        console.error(`❌ ${message}`);
        Deno.exit(1);
    }
}
